// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/luthersystems/sandbox/api/srvpb/oracle.proto

package srvpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	pb "github.com/luthersystems/sandbox/api/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/luthersystems/sandbox/api/srvpb/oracle.proto", fileDescriptor_fe0fdfd0403c7f9d)
}

var fileDescriptor_fe0fdfd0403c7f9d = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0x13, 0x3b,
	0x14, 0xc6, 0x95, 0xa4, 0xb7, 0x69, 0xdd, 0x7b, 0x75, 0x53, 0xab, 0xbd, 0x57, 0x4d, 0x0b, 0x32,
	0x2d, 0x0b, 0x54, 0x35, 0x33, 0x49, 0xda, 0xf2, 0xa7, 0x02, 0xa4, 0xb4, 0xaa, 0xda, 0x0a, 0x55,
	0x44, 0x09, 0x48, 0xa5, 0x42, 0xaa, 0x1c, 0xcf, 0xe9, 0xc4, 0xe0, 0xd8, 0x83, 0xed, 0x99, 0xb6,
	0x20, 0x36, 0x2c, 0x58, 0xb2, 0x28, 0x3b, 0x96, 0x2c, 0x79, 0x0d, 0x76, 0x6c, 0x11, 0x6f, 0xc0,
	0x83, 0xa0, 0x71, 0x26, 0x02, 0x9a, 0x4a, 0x61, 0x33, 0x1e, 0x9f, 0x73, 0xbe, 0xef, 0xe7, 0x23,
	0x5b, 0x07, 0xdd, 0x0a, 0xb9, 0xed, 0xc6, 0x1d, 0x8f, 0xa9, 0x9e, 0x2f, 0x62, 0xdb, 0x05, 0x6d,
	0xce, 0x8c, 0x85, 0x9e, 0xf1, 0x0d, 0x95, 0x41, 0x47, 0x9d, 0xfa, 0x34, 0xe2, 0xbe, 0xd1, 0x49,
	0xd4, 0xf1, 0x95, 0xa6, 0x4c, 0x80, 0x17, 0x69, 0x65, 0x15, 0x2e, 0x18, 0x9d, 0x94, 0xd7, 0xfe,
	0x48, 0x7d, 0x41, 0x5a, 0x5e, 0x08, 0x95, 0x0a, 0x05, 0xb8, 0x1c, 0x95, 0x52, 0x59, 0x6a, 0xb9,
	0x92, 0x26, 0xcb, 0xae, 0xb8, 0x85, 0x55, 0x42, 0x90, 0x15, 0x73, 0x42, 0xc3, 0x10, 0xb4, 0xaf,
	0x22, 0x57, 0x31, 0x5c, 0x5d, 0xff, 0x56, 0x40, 0xa5, 0x76, 0x9f, 0xd5, 0xd4, 0x8a, 0x81, 0x31,
	0x4a, 0x63, 0x81, 0xa6, 0x76, 0x81, 0x0a, 0xdb, 0xdd, 0xea, 0x02, 0x7b, 0x8e, 0xcb, 0x1e, 0x0b,
	0x7a, 0xde, 0x0e, 0xd8, 0x5f, 0x82, 0x2d, 0x78, 0x11, 0x83, 0xb1, 0xe5, 0xf9, 0x4b, 0x73, 0x26,
	0x52, 0xd2, 0xc0, 0xe2, 0xf5, 0xf3, 0xc6, 0x24, 0x2a, 0xb6, 0x41, 0x27, 0x9c, 0xc1, 0x9b, 0xaf,
	0xdf, 0xdf, 0xe7, 0x31, 0x2e, 0xf9, 0x49, 0xcd, 0xef, 0xba, 0xe2, 0x23, 0xe6, 0xec, 0xdf, 0xe6,
	0xd0, 0x3f, 0x5b, 0x1a, 0xa8, 0x85, 0x06, 0x63, 0x2a, 0x96, 0x16, 0xcf, 0x39, 0xd3, 0xdf, 0x62,
	0x03, 0x5e, 0xf9, 0xb2, 0x54, 0x86, 0xbb, 0x3f, 0x84, 0x5b, 0x59, 0xbc, 0x96, 0xe2, 0x68, 0xbf,
	0xd0, 0xf8, 0xaf, 0xb2, 0x3f, 0x2f, 0x5b, 0x8f, 0x78, 0xf0, 0x7a, 0xa3, 0x98, 0x6d, 0xb0, 0x40,
	0x68, 0x07, 0xec, 0xe0, 0x10, 0xff, 0x0d, 0x3a, 0xbb, 0x70, 0x82, 0xff, 0x87, 0xe2, 0x19, 0xbe,
	0x32, 0x84, 0x9f, 0xc7, 0x73, 0x97, 0xe2, 0x53, 0x2c, 0x7e, 0x8a, 0x26, 0x1e, 0x69, 0x2a, 0xcd,
	0x31, 0x68, 0x3c, 0xe3, 0x3c, 0x07, 0xdb, 0x01, 0x69, 0xf6, 0x42, 0x34, 0xe3, 0x2c, 0x0d, 0x71,
	0xa6, 0x17, 0xff, 0x4e, 0x39, 0x36, 0xab, 0xdc, 0xc8, 0x2d, 0x6f, 0x7e, 0x1e, 0x3b, 0x6f, 0xbc,
	0x1b, 0xc3, 0x18, 0x4d, 0x65, 0xb7, 0x4b, 0x1a, 0xcd, 0xbd, 0x7a, 0xa1, 0xe6, 0x55, 0x97, 0x73,
	0xf9, 0x7a, 0x89, 0x46, 0x91, 0xe0, 0xcc, 0xbd, 0x04, 0xff, 0x99, 0x51, 0x72, 0x63, 0x28, 0xd2,
	0xba, 0x8b, 0x0a, 0x6b, 0xd5, 0x1a, 0x5e, 0x47, 0x33, 0x8d, 0xd8, 0x76, 0x95, 0xe6, 0x2f, 0x5d,
	0x92, 0x1c, 0x53, 0x2e, 0x20, 0xc0, 0x57, 0xd0, 0x7c, 0x79, 0x2e, 0x7d, 0xb8, 0x3d, 0x25, 0xbd,
	0xed, 0x53, 0x06, 0xee, 0x89, 0x0d, 0x0e, 0xd9, 0x6a, 0xa6, 0xea, 0x2a, 0xde, 0x43, 0x37, 0x36,
	0x69, 0x40, 0x74, 0xbf, 0x23, 0x12, 0x80, 0x05, 0xdd, 0xe3, 0x12, 0x02, 0xd2, 0x39, 0x23, 0x9d,
	0xd8, 0x70, 0x09, 0xc6, 0x10, 0xa1, 0x42, 0xce, 0x46, 0x39, 0xde, 0x4e, 0x1d, 0xd7, 0x70, 0x0d,
	0x95, 0xf6, 0xb9, 0x31, 0x5c, 0x86, 0x44, 0x83, 0x51, 0xb1, 0x66, 0x30, 0x4a, 0x79, 0x27, 0x55,
	0xae, 0xe2, 0x3a, 0x9a, 0x6e, 0xa6, 0x74, 0x63, 0xd2, 0x36, 0x02, 0x90, 0x7c, 0x74, 0x1b, 0x4b,
	0xa9, 0x74, 0x1d, 0x2f, 0x20, 0xbc, 0x0f, 0xb6, 0xab, 0x02, 0x22, 0x95, 0x25, 0x54, 0x08, 0x75,
	0x02, 0x01, 0x1e, 0x47, 0x63, 0x1f, 0xf2, 0xb9, 0x62, 0x6b, 0x17, 0x15, 0xd6, 0xab, 0x55, 0xdc,
	0x40, 0xe4, 0xb1, 0x84, 0xd3, 0x08, 0x98, 0x85, 0x80, 0x70, 0x69, 0x41, 0x4b, 0x2a, 0x88, 0x01,
	0x9d, 0x80, 0x26, 0xa0, 0xb5, 0xd2, 0xa3, 0x70, 0xf7, 0x52, 0xa7, 0x55, 0x7c, 0x13, 0xcd, 0x66,
	0xd7, 0xdb, 0xe7, 0x25, 0x94, 0x0b, 0xda, 0x11, 0xa3, 0x1a, 0x3d, 0xbc, 0x8a, 0x16, 0xd0, 0xe4,
	0x41, 0xa5, 0xd1, 0xdc, 0xab, 0x3c, 0xd8, 0x7e, 0x82, 0xff, 0x9d, 0xc8, 0x97, 0x7f, 0x6e, 0x49,
	0x1e, 0x15, 0x99, 0xea, 0x79, 0x46, 0x27, 0x9b, 0x53, 0x0f, 0xdd, 0x3c, 0x69, 0xa6, 0x23, 0xa0,
	0x99, 0x3b, 0xfc, 0xcb, 0xcd, 0xa7, 0x8f, 0xf9, 0x42, 0xfb, 0xe0, 0xe0, 0x53, 0xbe, 0xd0, 0xd6,
	0xc9, 0x17, 0xf7, 0xed, 0x8c, 0xbb, 0x21, 0xb1, 0xfa, 0x23, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x7f,
	0x2b, 0xd7, 0xe6, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SandboxProcessorClient is the client API for SandboxProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SandboxProcessorClient interface {
	// Check the health of the scaffold processor. This is used by load balancers to check end-to-end service health.
	HealthCheck(ctx context.Context, in *pb.GetHealthCheckRequest, opts ...grpc.CallOption) (*pb.GetHealthCheckResponse, error)
	CreateAccount(ctx context.Context, in *pb.CreateAccountRequest, opts ...grpc.CallOption) (*pb.CreateAccountResponse, error)
	GetAccount(ctx context.Context, in *pb.GetAccountRequest, opts ...grpc.CallOption) (*pb.GetAccountResponse, error)
	Transfer(ctx context.Context, in *pb.TransferRequest, opts ...grpc.CallOption) (*pb.TransferResponse, error)
}

type sandboxProcessorClient struct {
	cc *grpc.ClientConn
}

func NewSandboxProcessorClient(cc *grpc.ClientConn) SandboxProcessorClient {
	return &sandboxProcessorClient{cc}
}

func (c *sandboxProcessorClient) HealthCheck(ctx context.Context, in *pb.GetHealthCheckRequest, opts ...grpc.CallOption) (*pb.GetHealthCheckResponse, error) {
	out := new(pb.GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/srv.SandboxProcessor/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxProcessorClient) CreateAccount(ctx context.Context, in *pb.CreateAccountRequest, opts ...grpc.CallOption) (*pb.CreateAccountResponse, error) {
	out := new(pb.CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/srv.SandboxProcessor/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxProcessorClient) GetAccount(ctx context.Context, in *pb.GetAccountRequest, opts ...grpc.CallOption) (*pb.GetAccountResponse, error) {
	out := new(pb.GetAccountResponse)
	err := c.cc.Invoke(ctx, "/srv.SandboxProcessor/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxProcessorClient) Transfer(ctx context.Context, in *pb.TransferRequest, opts ...grpc.CallOption) (*pb.TransferResponse, error) {
	out := new(pb.TransferResponse)
	err := c.cc.Invoke(ctx, "/srv.SandboxProcessor/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxProcessorServer is the server API for SandboxProcessor service.
type SandboxProcessorServer interface {
	// Check the health of the scaffold processor. This is used by load balancers to check end-to-end service health.
	HealthCheck(context.Context, *pb.GetHealthCheckRequest) (*pb.GetHealthCheckResponse, error)
	CreateAccount(context.Context, *pb.CreateAccountRequest) (*pb.CreateAccountResponse, error)
	GetAccount(context.Context, *pb.GetAccountRequest) (*pb.GetAccountResponse, error)
	Transfer(context.Context, *pb.TransferRequest) (*pb.TransferResponse, error)
}

// UnimplementedSandboxProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedSandboxProcessorServer struct {
}

func (*UnimplementedSandboxProcessorServer) HealthCheck(ctx context.Context, req *pb.GetHealthCheckRequest) (*pb.GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedSandboxProcessorServer) CreateAccount(ctx context.Context, req *pb.CreateAccountRequest) (*pb.CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedSandboxProcessorServer) GetAccount(ctx context.Context, req *pb.GetAccountRequest) (*pb.GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedSandboxProcessorServer) Transfer(ctx context.Context, req *pb.TransferRequest) (*pb.TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}

func RegisterSandboxProcessorServer(s *grpc.Server, srv SandboxProcessorServer) {
	s.RegisterService(&_SandboxProcessor_serviceDesc, srv)
}

func _SandboxProcessor_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxProcessorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.SandboxProcessor/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxProcessorServer).HealthCheck(ctx, req.(*pb.GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxProcessor_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxProcessorServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.SandboxProcessor/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxProcessorServer).CreateAccount(ctx, req.(*pb.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxProcessor_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxProcessorServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.SandboxProcessor/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxProcessorServer).GetAccount(ctx, req.(*pb.GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SandboxProcessor_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxProcessorServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.SandboxProcessor/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxProcessorServer).Transfer(ctx, req.(*pb.TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SandboxProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv.SandboxProcessor",
	HandlerType: (*SandboxProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _SandboxProcessor_HealthCheck_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _SandboxProcessor_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _SandboxProcessor_GetAccount_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _SandboxProcessor_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/luthersystems/sandbox/api/srvpb/oracle.proto",
}
